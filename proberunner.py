#!/usr/bin/env python

import os
import xively
import time
import datetime
import requests

# sensors and probes
import smbus
import psutil

bus = smbus.SMBus(1)


# extract feed_id and api_key from environment variables
FEED_ID = os.environ["FEED_ID"]
API_KEY = os.environ["API_KEY"]
DEBUG = os.environ["DEBUG"] or false

# initialize api client
api = xively.XivelyAPIClient(API_KEY)

# function to read 1 minute load average from psutil
def read_loadavg():
  if DEBUG:
    print "Reading load average"
  return psutil.cpu_percent()

# function to read sensor
def read_barometric_sensor():
  if DEBUG:
    print "Waking pressure sensor"
  bus.write_i2c_block_data(0x60, 0x12, [0x01])
  time.sleep(2)
  if DEBUG:
    print "Reading temperature and pressure data"
  bus.write_byte(0x60, 0x00)
  reading1 = bus.read_i2c_block_data(0x60, 0x00)
  pressure = ((reading1[0]<<2)+((reading1[1] & 0xc0) >> 6))
  pressure = ((65.0/1023.0)*pressure)+50
  tempC = (((reading1[2]<<2) + ((reading1[3] & 0xc0)>>6)) -510.0) / -5.35 + 25.0
  return (round(tempC, 2), round(pressure, 2))

# function to return a datastream object. This either creates a new datastream,
# or returns an existing one
def get_datastream(feed, channel):
  try:
    datastream = feed.datastreams.get(channel)
    if DEBUG:
      print "Found existing datastream"
    return datastream
  except:
    if DEBUG:
      print "Creating new datastream"
    datastream = feed.datastreams.create(channel, tags="autogenerated")
    return datastream


# main program entry point - runs continuously updating our datastream with the
# current 1 minute load average
def run():
  print "Starting Xively script"

  feed = api.feeds.get(FEED_ID)

  # setting up datastreams
  channels = ['load_avg', 'pressure', 'temperature']
  datastreams = {}
  for channel in channels:
    datastreams[channel] = get_datastream(feed, channel)
    datastreams[channel].max_value = None
    datastreams[channel].min_value = None

  while True:
    now = datetime.datetime.utcnow()
    for channel in channels:
      datastreams[channel].at = now

    # refactor here. 
    datastreams['load_avg'].current_value = read_loadavg()
    (temperature, pressure) = read_barometric_sensor()
    datastreams['temperature'].current_value = temperature
    datastreams['pressure'].current_value = pressure

    for channel in channels:
      if DEBUG:
        print "Updating %s channel with value: %s" % (channel, datastreams[channel].current_value)
      try:
        datastreams[channel].update()
      except requests.HTTPError as e:
        print "HTTPError({0}): {1}".format(e.errno, e.strerror)

    time.sleep(10)

run()
