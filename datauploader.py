#!/usr/bin/env python

import os
from sys import exit
import xively
import time
import datetime
import requests
import json

import paho.mqtt.client as mqtt


# persistent queue with rabbitMQ
# @todo: wrap in try/except
mqttc = mqtt.Client()

# extract feed_id and api_key from environment variables
FEED_ID = os.environ["FEED_ID"]
API_KEY = os.environ["API_KEY"]
DEBUG = os.environ["DEBUG"] or false

# initialize api client
api = xively.XivelyAPIClient(API_KEY)
datastreams = {}

# function to return a datastream object. This either creates a new datastream,
# or returns an existing one
def get_datastream(feed, channel):
  try:
    datastream = feed.datastreams.get(channel)
    if DEBUG:
      print "Found existing datastream %s" % channel
    return datastream
  except:
    if DEBUG:
      print "Creating new datastream %s" % channel
    datastream = feed.datastreams.create(channel, tags="autogenerated")
    return datastream

def on_connect(mosq, obj, rc):
    if rc == 0:
        print("Connected successfully.")
        mqttc.publish("jspilence/status/uploader", "jspilence uploader connected", 2, True )

def on_disconnect(mosq, obj, rc):
  if rc == 0:
    print("Disconnected successfully.")
  if rc != 0:
    print("Disconnected unexpectedly with return code %s. Reconnecting." % rc)
    mqttc.reconnect()

def on_message(mqttc, userdata, msg):
    """Callback function reads json encoded datapoints from MQTT broker.
    The default json encoder can not encode datetime.datetime objects, thus the date
    is converted to UNIX timestamps."""

    # limit upload datarate
    time.sleep(2)

    # data comes in order: channel, timestamp, value
    datapoint = json.loads(msg.payload)
    if DEBUG:
      print "received %s %s %s for channel %s" % (datapoint[0], datapoint[1], datapoint[2], msg.topic)
    datastreams[datapoint[0]].current_value = datapoint[2]
    datastreams[datapoint[0]].at = datetime.datetime.fromtimestamp(datapoint[1])
    try:
      datastreams[datapoint[0]].update()
    except requests.HTTPError as e:
      print "HTTPError({0}): {1}".format(e.errno, e.strerror)
    except requests.exceptions.ConnectionError as e:
      print "ConnectionError({0}): {1}".format(e.errno, e.strerror)

# main program entry point - runs continuously 
def main():
  print "Starting Xively upload script"
	
  feed = api.feeds.get(FEED_ID)

  mqttc.on_connect = on_connect
  mqttc.on_disconnect = on_disconnect
  mqttc.on_message = on_message

  mqttc.will_set("jspilence/status/uploader", "jspilence uploader disconnected unexpectedly", 2, True )
  mqttc.connect("localhost", 1883, 60)

  # setting up datastreams
  channels = ['load_avg', 'pressure', 'temperature', 'sht21_humidity', 'sht21_temperature']
  for channel in channels:
    mqttc.subscribe("jspilence/probedata/%s" % channel, 1)
    datastreams[channel] = get_datastream(feed, channel)
    datastreams[channel].max_value = None
    datastreams[channel].min_value = 0

  try:
    mqttc.loop_forever()
  except KeyboardInterrupt:
    mqttc.disconnect()
    exit()

if __name__ == "__main__":
    main()
